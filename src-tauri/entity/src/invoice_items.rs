//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::{entity::prelude::*, Set};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "invoice_items")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    #[sea_orm(column_type = "Double")]
    pub price: f64,
    pub invoice_id: String,
    #[sea_orm(unique)]
    pub inventory_id: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::inventory_mouvements::Entity",
        from = "Column::InventoryId",
        to = "super::inventory_mouvements::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    InventoryMouvements,
    #[sea_orm(
        belongs_to = "super::invoices::Entity",
        from = "Column::InvoiceId",
        to = "super::invoices::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Invoices,
}

impl Related<super::inventory_mouvements::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::InventoryMouvements.def()
    }
}

impl Related<super::invoices::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Invoices.def()
    }
}

impl ActiveModelBehavior for ActiveModel {
    fn new() -> Self {
        Self {
            id: Set(Uuid::now_v7().to_string()),
            ..ActiveModelTrait::default()
        }
    }
}
